#!/usr/bin/env python

# executing script allowing direct input of a protein name to get a graph back
# import stuff for making CLI

import os
import argparse

from metapredict.metapredict_exceptions import MetapredictError
import metapredict as meta
from metapredict.backend.uniprot_predictions import seq_from_name

if __name__ == "__main__":

    # Parse command line arguments.
    parser = argparse.ArgumentParser(description='Predict intrinsic disorder from a protein name.')

    parser.add_argument('name', nargs='+', help='Name of the protein.')

    parser.add_argument('-D', '--dpi', default=150, type=int, metavar='DPI',
                        help='Optional. Set DPI to change resolution of output graphs. Default is 150.')
    
    parser.add_argument('-p', '--pLDDT', action='store_true', help='Optional. Use this flag to include AlphaFold2 confidence scores in the graph.')                        

    parser.add_argument('-t', '--title', help='Title to put on graph')

    parser.add_argument('-l', '--legacy', action='store_true', help='Optional. Use this flag to use the original legacy version of metapredict.')

    args = parser.parse_args()

    # get protein name 
    if len(args.name) == 1:
        final_name = args.name[0]
    else:
        final_name = ''
        for i in args.name:
            final_name += i
            final_name += ' '
        final_name = final_name[:len(final_name)-1]

    # get sequence
    sequence = seq_from_name(final_name)

    # see if to include confidence scores
    if args.pLDDT == True:
        pLDDT_scores = True
    else:
        pLDDT_scores = False
    
    if args.legacy:
        use_legacy=True
    else:
        use_legacy=False


    # set title
    if args.title:
        graph_title = args.title
    else:
        graph_title = 'Disorder for %s'%(final_name)

    # graph it
    meta.graph_disorder(sequence, title=graph_title, pLDDT_scores=pLDDT_scores, DPI=args.dpi, legacy=use_legacy)
    




